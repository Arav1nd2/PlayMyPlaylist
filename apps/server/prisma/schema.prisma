// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../../../docs/ERD.svg"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  uid        String     @default(uuid())
  userName   String
  avatarUrl  String
  Room       Room?      @relation(fields: [roomId], references: [id])
  roomId     String?
  playlistId Int?
  Playlist   Playlist[]
  Score      Score[]
  createdAt  DateTime   @default(now())
}

model Playlist {
  id     Int               @id @default(autoincrement())
  songs  SongsInPlaylist[]
  User   User              @relation(fields: [userId], references: [id])
  userId Int
}

model Song {
  id                 Int               @id @default(autoincrement())
  externalId         String            @unique
  thumbnailUrl       String?
  playbackUrl        String?
  previewPlaybackUrl String
  source             String
  playlists          SongsInPlaylist[]
}

model SongsInPlaylist {
  song       Song     @relation(fields: [songId], references: [id])
  songId     Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  roomId     String
  room       Room     @relation(fields: [roomId], references: [id])
  createdAt  DateTime @default(now())

  @@id([songId, playlistId])
}

model Room {
  id              String            @id @default(uuid())
  maxPlayers      Int
  maxRounds       Int
  SongsInPlaylist SongsInPlaylist[]
  players         User[]
  game            GameState         @relation(fields: [gameStateId], references: [id])
  gameStateId     Int
  admin           Int
}

model GameState {
  id           Int         @id @default(autoincrement())
  status       GameStatus
  room         Room[]
  currentRound Int?
  rounds       GameRound[]
}

model GameRound {
  id               Int         @id @default(autoincrement())
  status           RoundStatus
  roundNumber      Int
  completedPlayers Int[]
  nextRound        Int
  Score            Score[]
  GameState        GameState?  @relation(fields: [gameStateId], references: [id])
  gameStateId      Int?
}

model Score {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  round       GameRound @relation(fields: [gameRoundId], references: [id])
  gameRoundId Int
}

enum GameStatus {
  WAITING_IN_LOBBY
  STARTED
  ENDED
  PAUSED
}

enum RoundStatus {
  STARTED
  WAITING_FOR_PLAYERS
  ENDED
}
